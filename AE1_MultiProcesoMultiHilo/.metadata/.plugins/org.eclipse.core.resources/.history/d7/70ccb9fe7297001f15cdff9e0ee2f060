package florida.AppProteinas;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class SimulacionMT implements Runnable {
	private int tipoProteina;
	private int numeroSimulaciones;
	private Controlador controlador;

	public SimulacionMT(int tipoProteina, int numeroSimulaciones, Controlador controlador) {
		this.tipoProteina = tipoProteina;
		this.numeroSimulaciones = numeroSimulaciones;
		this.controlador = controlador;
	}

	public void run() {
		System.out.println("Comienza la simulacion multihilo.");
		for (int i = 0; i < numeroSimulaciones; i++) {
			DateTimeFormatter dateFormatterDate = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");

			LocalDateTime inicioSimProte = LocalDateTime.now();
			String tiempoInicioProte = inicioSimProte.format(dateFormatterDate);

			long timeInicio = System.currentTimeMillis();

			double resultado = simulation(tipoProteina);

			long timeFin = System.currentTimeMillis();

			LocalDateTime tiempoFinSimProte = LocalDateTime.now();
			String tiempoFinProte = tiempoFinSimProte.format(dateFormatterDate);

			long duracionMS = timeFin - timeInicio;
			long duracionSeg = duracionMS / 1000;
			long duracionCent = (duracionMS % 1000) / 10;
			String duracion = String.format("%d_%02d", duracionSeg, duracionCent);

			String centesimasIni = String.format("%02d", (timeInicio % 1000) / 10);
			String centesimasFin = String.format("%02d", (timeFin % 1000) / 10);

//			int contador = controlador.contadorSimulaciones();
			String nombreFichero = nombreFicheros("MT", tipoProteina, 0, tiempoInicioProte, centesimasIni);
			System.out.println();
			String duracionString = "Tiepo simulacion MT: " + duracionMS;
//			System.out.println("Resultado de la proteina " + (i + 1) + "de tipo " + tipoProteina + ": " + resultado
//					+ "\n" + tiempoInicioProte + "_" + centesimasIni + "\n" + tiempoFinSimProte + "_" + centesimasFin
//					+ "\n" + duracion + "\n" + resultado);
//			System.out.println("Nombre del fichero que se va a crear: " + nombreFichero + "\n");

			escribirFichero(nombreFichero, tiempoInicioProte, tiempoFinProte, centesimasIni, centesimasFin, duracion,
					resultado);
//			String resultadoFichero = resultadoStringFichero(tiempoInicioProte, tiempoFinProte, centesimasIni,
//					centesimasFin, duracion, resultado);

			try {
				controlador.mostrarResultadosMT(duracionString);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		System.out.println("Ha terminado la simulacion multihilo.");
	}

	public static void escribirFichero(String nombreFichero, String tiempoInicioProte, String tiempoFinSimProte,
			String centesimasIni, String centesimasFin, String duracion, double resultado) {
		File file = new File(nombreFichero);

		try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {

			bw.write(tiempoInicioProte + "_" + centesimasIni + "\n");
			bw.write(tiempoFinSimProte + "_" + centesimasFin + "\n");
			bw.write(duracion + "\n");
			bw.write(String.valueOf(resultado));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static String nombreFicheros(String tipoSimulacion, int tipoProteina, int numeroSimulaciones,
			String tiempoInicioSim, String duracionCentesimas) {

		return "PROT_" + tipoSimulacion + "_" + tipoProteina + "_n" + numeroSimulaciones + "_" + tiempoInicioSim + "_"
				+ duracionCentesimas + ".sim";
	}

	public String resultadoStringFichero(String tiempoInicioProte, String tiempoFinProte, String centesimasIni,
			String centesimasFin, String duracion, double resultado) {
		return tiempoInicioProte + "_" + centesimasIni + "\n" + tiempoFinProte + "_" + centesimasFin + "\n" + duracion
				+ "\n" + resultado + "\n";
	}

	public static double simulation(int type) {
		double calc = 0.0;
		double simulationTime = Math.pow(5, type);
		double startTime = System.currentTimeMillis();
		double endTime = startTime + simulationTime;
		while (System.currentTimeMillis() < endTime) {
			calc = Math.sin(Math.pow(Math.random(), 2));
		}
		return calc;
	}
}
